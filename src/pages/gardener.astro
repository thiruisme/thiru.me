---
import Layout from "../components/Layout.astro";
import { getCollection } from "astro:content";

// Get existing entries for connection dropdown
const existingEntries = await getCollection("garden", ({ data }) => {
  return data.draft !== true;
});
---

<Layout 
  title="Garden Admin | Generate New Entry" 
  hero={false}
  description="Secret admin page for generating new garden entries."
>
  <div class="gardener-container">
    <div class="gardener-header">
      <h1>🌿 The Gardener</h1>
      <p>Tend to your digital garden by planting new ideas and thoughts</p>
    </div>

    <div class="growth-guide">
      <h2>🌱 Growth Stage Guide</h2>
      <div class="growth-stages">
        <div class="stage-card">
          <span class="stage-icon">🌱</span>
          <div class="stage-info">
            <h3>Seedling</h3>
            <p>New ideas, initial thoughts, rough concepts that need nurturing</p>
          </div>
        </div>
        <div class="stage-card">
          <span class="stage-icon">🌿</span>
          <div class="stage-info">
            <h3>Growing</h3>
            <p>Developing concepts, ideas being refined and expanded</p>
          </div>
        </div>
        <div class="stage-card">
          <span class="stage-icon">🌸</span>
          <div class="stage-info">
            <h3>Blooming</h3>
            <p>Active exploration, ideas in full development</p>
          </div>
        </div>
        <div class="stage-card">
          <span class="stage-icon">🌳</span>
          <div class="stage-info">
            <h3>Mature</h3>
            <p>Well-formed thoughts, stable concepts, wisdom gained</p>
          </div>
        </div>
      </div>
    </div>

    <form class="gardener-form" id="gardenForm">
      <div class="form-section">
        <h2>🌱 Plant a New Idea</h2>
        
        <div class="form-group">
          <label for="title">💭 Idea Title *</label>
          <input type="text" id="title" name="title" required placeholder="The Art of Slow Living">
        </div>

        <div class="form-row">
          <div class="form-group">
            <label for="growth">🌱 Growth Stage *</label>
            <div class="custom-select">
              <select id="growth" name="growth" required>
                <option value="">🌿 Choose growth stage...</option>
                <option value="seedling">🌱 Seedling - New idea, needs nurturing</option>
                <option value="growing">🌿 Growing - Developing concept</option>
                <option value="blooming">🌸 Blooming - Active exploration</option>
                <option value="mature">🌳 Mature - Well-formed thought</option>
              </select>
            </div>
          </div>

          <div class="form-group">
            <label for="type">🎭 Thought Type *</label>
            <div class="custom-select">
              <select id="type" name="type" required>
                <option value="">💭 Choose thought type...</option>
                <option value="reflection">🪞 Reflection - Personal contemplation</option>
                <option value="insight">💡 Insight - Breakthrough moment</option>
                <option value="observation">👁️ Observation - Pattern noticed</option>
                <option value="principle">⚖️ Principle - Core belief</option>
              </select>
            </div>
          </div>
        </div>

        <div class="form-group">
          <label for="tags">🏷️ Tags (comma-separated)</label>
          <input type="text" id="tags" name="tags" placeholder="philosophy, design, aesthetics">
        </div>

        <div class="form-group">
          <label for="connections">🔗 Connect to Garden</label>
          <div class="connections-selector">
            <div class="connections-header">
              <span>🌐 Link this idea to existing thoughts</span>
            </div>
            {existingEntries.map(entry => (
              <label class="connection-option">
                <input type="checkbox" name="connections" value={entry.slug}>
                <span class="connection-emoji">
                  {entry.data.growth === 'seedling' ? '🌱' : 
                   entry.data.growth === 'growing' ? '🌿' : 
                   entry.data.growth === 'blooming' ? '🌸' : '🌳'}
                </span>
                <span class="connection-label">
                  {entry.data.title}
                </span>
              </label>
            ))}
          </div>
        </div>

        <div class="form-group">
          <label for="content">📝 Your Thoughts *</label>
          <textarea id="content" name="content" required rows="8" placeholder="Plant your seed of wisdom here..."></textarea>
        </div>

        <div class="form-group">
          <label class="draft-option">
            <input type="checkbox" id="draft" name="draft">
            <span class="draft-label">🌱 Save as draft (not ready to bloom)</span>
          </label>
        </div>
      </div>

      <div class="form-actions">
        <button type="button" id="generateBtn" class="generate-btn">
          🌱 Cultivate Idea
        </button>
        <button type="button" id="previewBtn" class="preview-btn">
          👁️ Preview Growth
        </button>
      </div>
    </form>

    <div id="preview" class="preview-section" style="display: none;">
      <h2>📄 File Preview</h2>
      <div class="preview-content">
        <div class="file-info">
          <span id="filename">filename.md</span>
          <button id="downloadBtn" class="download-btn">📥 Download</button>
        </div>
        <pre id="fileContent"></pre>
      </div>
    </div>
  </div>
</Layout>

<style>
  .gardener-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 2rem;
  }

  .gardener-header {
    text-align: center;
    margin-bottom: 2rem;
    padding: 2rem;
    background: linear-gradient(135deg, #f0f8f0, #e8f5e8);
    border-radius: var(--radius-lg);
    border: 2px solid rgba(43, 122, 87, 0.2);
    position: relative;
    overflow: hidden;
  }

  .gardener-header::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(43, 122, 87, 0.1) 1px, transparent 1px);
    background-size: 20px 20px;
    animation: gentle-sway 20s linear infinite;
  }

  @keyframes gentle-sway {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .gardener-header h1 {
    color: var(--heading-color);
    margin-bottom: 0.5rem;
    position: relative;
    z-index: 2;
  }

  .gardener-header p {
    color: var(--text-color);
    font-style: italic;
    position: relative;
    z-index: 2;
  }

  .growth-guide {
    background: #f6fcf6;
    border: 1px solid rgba(43, 122, 87, 0.15);
    border-radius: var(--radius-lg);
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .growth-guide h2 {
    color: var(--heading-color);
    margin-bottom: 1rem;
    text-align: center;
  }

  .growth-stages {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .stage-card {
    background: white;
    border: 1px solid rgba(43, 122, 87, 0.1);
    border-radius: var(--radius-md);
    padding: 1rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    transition: all 0.2s ease;
  }

  .stage-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(43, 122, 87, 0.1);
  }

  .stage-icon {
    font-size: 2rem;
    flex-shrink: 0;
  }

  .stage-info h3 {
    color: var(--heading-color);
    margin-bottom: 0.25rem;
    font-size: 1rem;
  }

  .stage-info p {
    color: var(--text-color);
    font-size: 0.85rem;
    line-height: 1.4;
  }

  .gardener-form {
    background: #f8fdf8;
    border: 1px solid rgba(43, 122, 87, 0.15);
    border-radius: var(--radius-lg);
    padding: 2rem;
    margin-bottom: 2rem;
    position: relative;
  }

  .gardener-form::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 20% 30%, rgba(43, 122, 87, 0.05) 2px, transparent 2px),
      radial-gradient(circle at 80% 70%, rgba(43, 122, 87, 0.05) 2px, transparent 2px);
    background-size: 40px 40px;
    pointer-events: none;
  }

  .form-section h2 {
    color: var(--heading-color);
    margin-bottom: 1.5rem;
    border-bottom: 2px solid rgba(43, 122, 87, 0.1);
    padding-bottom: 0.5rem;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    font-weight: 600;
    color: var(--heading-color);
    margin-bottom: 0.5rem;
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid rgba(43, 122, 87, 0.3);
    border-radius: var(--radius-sm);
    font-size: 1rem;
    transition: border-color 0.2s ease;
    background: white;
    position: relative;
    z-index: 2;
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--emerald-light);
    box-shadow: 0 0 0 3px rgba(43, 122, 87, 0.1);
  }

  .custom-select {
    position: relative;
    z-index: 2;
  }

  .custom-select select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid rgba(43, 122, 87, 0.3);
    border-radius: var(--radius-sm);
    font-size: 1rem;
    transition: all 0.2s ease;
    background: white;
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
  }

  .custom-select select:focus {
    outline: none;
    border-color: var(--emerald-light);
    box-shadow: 0 0 0 3px rgba(43, 122, 87, 0.1);
  }

  .custom-select select:hover {
    border-color: var(--emerald-light);
  }

  .form-group textarea {
    resize: vertical;
    min-height: 120px;
    line-height: 1.5;
    font-family: inherit;
  }

  .connections-selector {
    border: 1px solid rgba(43, 122, 87, 0.2);
    border-radius: var(--radius-sm);
    background: white;
    max-height: 250px;
    overflow-y: auto;
    position: relative;
    z-index: 2;
  }

  .connections-header {
    padding: 0.75rem;
    background: linear-gradient(135deg, #f0f8f0, #e8f5e8);
    border-bottom: 1px solid rgba(43, 122, 87, 0.1);
    font-size: 0.9rem;
    color: var(--emerald-dark);
    font-weight: 500;
  }

  .connection-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
    border-bottom: 1px solid rgba(43, 122, 87, 0.05);
  }

  .connection-option:hover {
    background: rgba(43, 122, 87, 0.05);
  }

  .connection-option:last-child {
    border-bottom: none;
  }

  .connection-emoji {
    font-size: 1.2rem;
    flex-shrink: 0;
  }

  .connection-label {
    font-size: 0.9rem;
    color: var(--text-color);
    flex-grow: 1;
  }

  .draft-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: var(--radius-sm);
    transition: background 0.2s ease;
  }

  .draft-option:hover {
    background: rgba(43, 122, 87, 0.05);
  }

  .draft-label {
    font-size: 0.9rem;
    color: var(--text-color);
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-top: 2rem;
  }

  .generate-btn,
  .preview-btn {
    padding: 1rem 2rem;
    border: none;
    border-radius: var(--radius-md);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .generate-btn {
    background: var(--emerald-light);
    color: white;
  }

  .generate-btn:hover {
    background: var(--emerald-dark);
    transform: translateY(-2px);
  }

  .preview-btn {
    background: var(--accent-bot);
    color: white;
  }

  .preview-btn:hover {
    background: var(--accent-top);
    color: var(--emerald-dark);
    transform: translateY(-2px);
  }

  .preview-section {
    background: #f8fdf8;
    border: 1px solid rgba(43, 122, 87, 0.15);
    border-radius: var(--radius-lg);
    padding: 2rem;
  }

  .preview-section h2 {
    color: var(--heading-color);
    margin-bottom: 1rem;
  }

  .file-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: rgba(43, 122, 87, 0.05);
    border-radius: var(--radius-sm);
    margin-bottom: 1rem;
  }

  .file-info span {
    font-family: 'Courier New', monospace;
    font-weight: 600;
    color: var(--emerald-dark);
  }

  .download-btn {
    background: var(--emerald-light);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: var(--radius-sm);
    cursor: pointer;
    font-size: 0.9rem;
    transition: background 0.2s ease;
  }

  .download-btn:hover {
    background: var(--emerald-dark);
  }

  .preview-content pre {
    background: #f0f0f0;
    padding: 1rem;
    border-radius: var(--radius-sm);
    overflow-x: auto;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    line-height: 1.4;
    color: #333;
    white-space: pre-wrap;
  }

  @media (max-width: 600px) {
    .admin-container {
      padding: 1rem;
    }

    .form-row {
      grid-template-columns: 1fr;
    }

    .form-actions {
      flex-direction: column;
    }

    .connections-selector {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('gardenForm');
    const generateBtn = document.getElementById('generateBtn');
    const previewBtn = document.getElementById('previewBtn');
    const downloadBtn = document.getElementById('downloadBtn');
    const preview = document.getElementById('preview');
    const filename = document.getElementById('filename');
    const fileContent = document.getElementById('fileContent');
    
    let currentMarkdown = '';
    let currentFilename = '';

    function generateSlug(title) {
      return title
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/^-+|-+$/g, '');
    }

    function generateMarkdown() {
      const formData = new FormData(form);
      const title = formData.get('title');
      const growth = formData.get('growth');
      const type = formData.get('type');
      const tags = formData.get('tags');
      const content = formData.get('content');
      const draft = formData.get('draft') === 'on';
      
      // Get selected connections
      const connections = Array.from(form.querySelectorAll('input[name="connections"]:checked'))
        .map(cb => cb.value);
      
      if (!title || !content) {
        alert('Please fill in the title and content fields.');
        return;
      }

      const slug = generateSlug(title);
      const now = new Date();
      const dateString = now.toISOString();
      
      // Generate tags array
      const tagsArray = tags ? tags.split(',').map(t => t.trim()).filter(t => t) : [];
      
      // Build frontmatter
      let frontmatter = `---
title: "${title}"
dateAdded: ${dateString}
growth: ${growth}
type: ${type}`;
      
      if (tagsArray.length > 0) {
        frontmatter += `\ntags: [${tagsArray.map(t => `"${t}"`).join(', ')}]`;
      }
      
      if (connections.length > 0) {
        frontmatter += `\nconnections: [${connections.map(c => `"${c}"`).join(', ')}]`;
      }
      
      if (draft) {
        frontmatter += '\ndraft: true';
      }
      
      frontmatter += '\n---\n\n';
      
      currentMarkdown = frontmatter + content;
      currentFilename = `${slug}.md`;
      
      return { markdown: currentMarkdown, filename: currentFilename };
    }

    function showPreview() {
      const result = generateMarkdown();
      if (result) {
        filename.textContent = result.filename;
        fileContent.textContent = result.markdown;
        preview.style.display = 'block';
        preview.scrollIntoView({ behavior: 'smooth' });
      }
    }

    function downloadFile() {
      if (!currentMarkdown) {
        alert('Please generate the markdown first.');
        return;
      }
      
      const blob = new Blob([currentMarkdown], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = currentFilename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    generateBtn.addEventListener('click', showPreview);
    previewBtn.addEventListener('click', showPreview);
    downloadBtn.addEventListener('click', downloadFile);
  });
</script>
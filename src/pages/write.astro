---
import Layout from "../components/Layout.astro";
---

<Layout current="" title="Write Blog Post â€“ Thiru's Internet Corner" description="A cozy digital notebook for writing blog posts">
  <main class="content">
    <div class="writer-container">
      <div class="writer-header">
        <h1>Write a New Blog Post</h1>
        <div class="writer-actions">
          <button id="copy-btn" class="writer-button secondary">
            <span>Copy Markdown</span>
          </button>
          <button id="export-btn" class="writer-button">
            <span>Download as .md</span>
          </button>
        </div>
      </div>
      
      <div class="writer-sections">
        <!-- Metadata section with grid paper style -->
        <div class="metadata-wrapper">
          <div class="metadata-section">
            <div class="metadata-field">
              <label for="post-title">Title</label>
              <input type="text" id="post-title" placeholder="Your blog post title..." />
            </div>
            
            <div class="metadata-row">
              <div class="metadata-field">
                <label for="post-date">Date</label>
                <input type="date" id="post-date" />
              </div>
              
              <div class="metadata-field">
                <label for="post-thumbnail">Thumbnail Path</label>
                <input type="text" id="post-thumbnail" placeholder="/images/covers/..." />
              </div>
            </div>
            
            <div class="metadata-field">
              <label for="post-excerpt">Excerpt</label>
              <textarea id="post-excerpt" rows="2" placeholder="A brief description of your post..."></textarea>
            </div>
            
            <div class="metadata-field">
              <label for="post-tags">Tags</label>
              <div class="tags-container">
                <div id="tags-list" class="tags-list"></div>
                <input type="text" id="tag-input" placeholder="Add tag and press Enter..." />
              </div>
            </div>
          </div>
        </div>

        <!-- Writing section with ruled paper style -->
        <div class="writing-wrapper">
          <!-- Fixed toolbar for non-text actions -->
          <div class="fixed-toolbar">
            <button data-action="heading1" title="Heading 1">
              <span>H1</span>
            </button>
            <button data-action="heading2" title="Heading 2">
              <span>H2</span>
            </button>
            <button data-action="heading3" title="Heading 3">
              <span>H3</span>
            </button>
            <div class="toolbar-divider"></div>
            <button data-action="blockquote" title="Blockquote">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M6 17h3a2 2 0 0 0 2-2v-5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h1zm0 0v-2m9 2h3a2 2 0 0 0 2-2v-5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h1zm0 0v-2"></path>
              </svg>
            </button>
            <button data-action="pullquote" title="Pull Quote">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 8h8M12 12h8M12 16h8M4 8l2-2v12"></path>
              </svg>
            </button>
            <div class="toolbar-divider"></div>
            <button data-action="image" title="Insert Image">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                <circle cx="8.5" cy="8.5" r="1.5"></circle>
                <polyline points="21 15 16 10 5 21"></polyline>
              </svg>
            </button>
            <button data-action="list" title="Bullet List">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="8" y1="6" x2="21" y2="6"></line>
                <line x1="8" y1="12" x2="21" y2="12"></line>
                <line x1="8" y1="18" x2="21" y2="18"></line>
                <line x1="3" y1="6" x2="3.01" y2="6"></line>
                <line x1="3" y1="12" x2="3.01" y2="12"></line>
                <line x1="3" y1="18" x2="3.01" y2="18"></line>
              </svg>
            </button>
          </div>

          <!-- Floating toolbar for text formatting -->
          <div id="floating-toolbar" class="floating-toolbar">
            <button data-action="bold" title="Bold (Ctrl+B)">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3">
                <path d="M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path>
                <path d="M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path>
              </svg>
            </button>
            <button data-action="italic" title="Italic (Ctrl+I)">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="19" y1="4" x2="10" y2="4"></line>
                <line x1="14" y1="20" x2="5" y2="20"></line>
                <line x1="15" y1="4" x2="9" y2="20"></line>
              </svg>
            </button>
            <button data-action="link" title="Link">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
                <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
              </svg>
            </button>
          </div>

          <div 
            id="editor" 
            class="writer-editor" 
            contenteditable="true"
            placeholder="Start writing your blog post..."
          ></div>
        </div>
      </div>

      <!-- Preview section -->
      <div class="preview-section">
        <h2>Markdown Preview</h2>
        <pre id="markdown-preview" class="markdown-preview"></pre>
      </div>
    </div>
  </main>

  <style>
    .writer-container {
      max-width: 900px;
      margin: 0 auto;
      padding: 0;
    }

    .writer-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .writer-header h1 {
      font-family: "aesthet-nova", serif;
      color: var(--heading-color);
      margin: 0;
    }

    .writer-actions {
      display: flex;
      gap: 0.8rem;
    }

    .writer-button {
      background: #e8f5e9;
      color: var(--emerald-dark);
      border: 1px solid var(--accent-bot);
      padding: 0.6rem 1.2rem;
      border-radius: 5px;
      cursor: pointer;
      font-family: "avenir-lt-pro", sans-serif;
      font-size: 1rem;
      font-weight: 400;
      transition: all 0.2s ease;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      position: relative;
      overflow: hidden;
    }

    .writer-button::before {
      content: "";
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(167, 245, 66, 0.3), transparent);
      transition: left 0.5s;
    }

    .writer-button:hover::before {
      left: 100%;
    }

    .writer-button:hover {
      background: var(--accent-bot);
      color: white;
      transform: translateY(-2px) rotate(1deg);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .writer-button.secondary {
      background: #e8f5e9;
      border-color: var(--emerald-light);
      color: var(--emerald-dark);
    }

    .writer-button.secondary:hover {
      background: var(--emerald-light);
      color: white;
    }

    .writer-sections {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }

    /* Metadata section with grid paper style */
    .metadata-wrapper {
      position: relative;
      background: #fcf8f3;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
background-color: #FCF8F3;
opacity: 0.8;
background-size: 26px 26px;
background-image:  repeating-linear-gradient(0deg, #eaebeb, #eaebeb 1.3px, #FCF8F3 1.3px, #FCF8F3);
      overflow: hidden;
      transform: rotate(-0.3deg);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .metadata-wrapper:hover {
      transform: rotate(0deg);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    }

    .metadata-section {
      padding: 40px;
      position: relative;
    }

    .metadata-field {
      margin-bottom: 1.8rem;
      position: relative;
    }

    .metadata-field label {
      display: block;
font-family: "bulletin-typewriter-mn", sans-serif;
font-weight: 400;
font-style: normal;
letter-spacing: .25ch;
      color: var(--heading-color);
      font-size: 1.2rem;
      margin-bottom: 0.3rem;
      margin-left: 0.5rem;
    }

    .metadata-field input,
    .metadata-field textarea {
      width: 100%;
      padding: 0.6rem 0.8rem;
      font-family: "adobe-handwriting-ernie", sans-serif;
      font-size: 1.1rem;
      font-weight: 400;
      border: none;
      border-bottom: 2px dashed #b8d5b5;
      border-radius: 0;
      background: transparent;
      transition: all 0.3s;
      color: var(--emerald-dark);
    }

    .metadata-field input:focus,
    .metadata-field textarea:focus {
      outline: none;
      border-bottom: 2px solid var(--accent-bot);
    }

    .metadata-field textarea {
      resize: vertical;
      font-family: "adobe-handwriting-ernie", sans-serif;
      line-height: 1.8;
    }

    .metadata-row {
      display: grid;
      grid-template-columns: 200px 1fr;
      gap: 1rem;
    }

    /* Tags as pills */
    .tags-container {
      display: flex;
      flex-wrap: wrap;
      gap: 0.8rem;
      align-items: center;
      margin-top: 0.5rem;
    }

    .tags-list {
      display: flex;
      flex-wrap: wrap;
      gap: 0.8rem;
    }

    .tag-item {
      background: var(--accent-bot);
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 25px;
      font-size: 0.9rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      position: relative;
      transition: all 0.2s;
      font-family: "avenir-lt-pro", sans-serif;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .tag-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
      background: var(--emerald-dark);
    }

    .tag-item button {
      background: rgba(255, 255, 255, 0.3);
      border: none;
      color: white;
      cursor: pointer;
      padding: 0;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
      line-height: 1;
      font-weight: bold;
      transition: all 0.2s;
      margin-left: 0.2rem;
    }

    .tag-item button:hover {
      background: rgba(255, 255, 255, 0.5);
      transform: scale(1.1);
    }

    #tag-input {
      flex: 1;
      min-width: 150px;
      font-family: "adobe-handwriting-ernie", sans-serif;
    }

    /* Writing section with ruled paper style */
    .writing-wrapper {
      position: relative;
      background: #fcf8f3;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
background-color: #FCF8F3;
opacity: 0.8;
background-image:  linear-gradient(#eaebeb 2.6px, transparent 2.6px), linear-gradient(90deg, #eaebeb 2.6px, transparent 2.6px), linear-gradient(#eaebeb 1.3px, transparent 1.3px), linear-gradient(90deg, #eaebeb 1.3px, #FCF8F3 1.3px);
background-size: 65px 65px, 65px 65px, 13px 13px, 13px 13px;
background-position: -2.6px -2.6px, -2.6px -2.6px, -1.3px -1.3px, -1.3px -1.3px;
      overflow: visible;
      transform: rotate(-0.5deg);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .writing-wrapper:hover,
    .writing-wrapper:focus-within {
      transform: rotate(0deg);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    }

    /* Fixed toolbar */
    .fixed-toolbar {
      display: flex;
      gap: 10px;
      align-items: center;
      padding: 40px 40px 20px 80px;
      background: transparent;
      flex-wrap: wrap;
    }

    .fixed-toolbar button,
    .floating-toolbar button {
      width: 3rem;
      height: auto;
      background: #fcf8f3;
      border: 1px solid var(--emerald-light);
      padding: 14px 14px;
      cursor: pointer;
      border-radius: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s;
      color: var(--emerald-dark);
font-family: "bulletin-typewriter-mn", sans-serif;
font-weight: 400;
font-style: normal;
letter-spacing: .25ch;
      font-size: 0.95rem;
      position: relative;
      transform: rotate(-1deg);
    }

    .fixed-toolbar button:nth-child(even) {
      transform: rotate(.5deg);
    }

    .fixed-toolbar button:hover,
    .floating-toolbar button:hover {
      background: var(--accent-bot);
      color: white;
      border-color: var(--accent-bot);
      transform: rotate(0deg) scale(1.05);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    /* Floating toolbar */
    .floating-toolbar {
      position: absolute;
      background: #fcf8f3;
      border: 1px solid var(--emerald-light);
      border-radius: 11px;
      padding: 6px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      display: none;
      gap: 4px;
      align-items: center;
      z-index: 1000;
    }

    .floating-toolbar.show {
      display: flex;
    }

    .floating-toolbar button.active {
      background: var(--accent-bot);
      color: white;
      border-color: var(--accent-bot);
    }

    .toolbar-divider {
      width: 2px;
      height: 24px;
      background: var(--accent-bot);
      opacity: 0.3;
      margin: 0 4px;
      border-radius: 1px;
    }

    /* Editor */
    .writer-editor {
      min-height: 500px;
      padding: 20px 40px 60px 80px;
      font-family: "avenir-lt-pro", sans-serif;
      font-size: 1.05rem;
      line-height: 30px;
      color: var(--emerald-dark);
      outline: none;
      position: relative;
      background: transparent;
    }

    .writer-editor:empty:before {
      content: attr(placeholder);
      color: #999;
      font-style: italic;
      pointer-events: none;
      position: absolute;
      font-family: "avenir-lt-pro", sans-serif;
    }

    /* Editor content styles */
    .writer-editor h1 {
      font-family: "aesthet-nova", serif;
      color: var(--heading-color);
      font-size: 2rem;
      margin: 2.5rem 0 1.5rem;
      line-height: 1.2;
    }

    .writer-editor h2 {
      font-family: "aesthet-nova", serif;
      color: var(--heading-color);
      font-size: 1.6rem;
      margin: 2rem 0 1rem;
      line-height: 1.3;
    }

    .writer-editor h3 {
      font-family: "aesthet-nova", serif;
      color: var(--heading-color);
      font-size: 1.3rem;
      margin: 1.5rem 0 0.8rem;
      line-height: 1.3;
    }

    .writer-editor blockquote {
      border-left: 3px solid var(--accent-bot);
      padding-left: 1.5rem;
      margin: 1.5rem 0;
      font-style: italic;
      color: #555;
      font-family: "avenir-lt-pro", sans-serif;
    }

    .writer-editor .pullquote {
      float: left;
      width: 40%;
      margin: 1rem 2rem 1rem 0;
      padding: 1rem;
      font-size: 1.2rem;
      font-style: italic;
      color: var(--emerald-dark);
      border-left: 3px solid var(--accent-bot);
      font-family: "avenir-lt-pro", sans-serif;
    }

    .writer-editor img {
      max-width: 100%;
      height: auto;
      margin: 1.5rem 0;
      border-radius: 4px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .writer-editor ul {
      margin: 1rem 0;
      padding-left: 2rem;
      font-family: "avenir-lt-pro", sans-serif;
    }

    .writer-editor li {
      margin: 0.5rem 0;
      font-family: "avenir-lt-pro", sans-serif;
    }

    .writer-editor a {
      color: var(--accent-bot);
      text-decoration: underline;
    }

    .writer-editor p {
      font-family: "avenir-lt-pro", sans-serif;
    }

    /* Preview section */
    .preview-section {
      margin-top: 3rem;
    }

    .preview-section h2 {
      font-family: "aesthet-nova", serif;
      color: var(--heading-color);
      margin-bottom: 1rem;
    }

    .markdown-preview {
      background: #1B4D3E;
      color: white;
      padding: 2rem;
      border-radius: 8px;
font-family: "bulletin-typewriter-mn", sans-serif;
font-weight: 400;
font-style: normal;
      font-size: 0.9rem;
      line-height: 1.6;
      white-space: pre-wrap;
      overflow-x: auto;
      max-height: 400px;
      overflow-y: auto;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      transform: rotate(-0.5deg);
      transition: transform 0.2s;
    }

    .markdown-preview:hover {
      transform: rotate(0deg);
    }

    /* Scrollbar styling for preview */
    .markdown-preview::-webkit-scrollbar {
      width: 10px;
    }

    .markdown-preview::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 5px;
    }

    .markdown-preview::-webkit-scrollbar-thumb {
      background: var(--accent-bot);
      border-radius: 5px;
    }

    .markdown-preview::-webkit-scrollbar-thumb:hover {
      background: var(--accent-top);
    }

    /* Responsive */
    @media (max-width: 700px) {
      .metadata-section,
      .fixed-toolbar,
      .writer-editor {
        padding-left: 30px;
        padding-right: 30px;
      }

      .writing-wrapper::before {
        left: 30px;
      }

      .metadata-row {
        grid-template-columns: 1fr;
      }

      .writer-header {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
      }

      .fixed-toolbar {
        flex-wrap: wrap;
      }

      .writer-editor .pullquote {
        float: none;
        width: 100%;
        margin: 1rem 0;
      }
    }
  </style>

  <script>
    const editor = document.getElementById('editor');
    const floatingToolbar = document.getElementById('floating-toolbar');
    const fixedToolbar = document.querySelector('.fixed-toolbar');
    const exportBtn = document.getElementById('export-btn');
    const copyBtn = document.getElementById('copy-btn');
    const previewElement = document.getElementById('markdown-preview');
    
    // Set today's date
    document.getElementById('post-date').value = new Date().toISOString().split('T')[0];
    
    // Tags functionality
    const tagInput = document.getElementById('tag-input');
    const tagsList = document.getElementById('tags-list');
    let tags = [];
    
    tagInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        const tag = tagInput.value.trim();
        if (tag && !tags.includes(tag)) {
          tags.push(tag);
          renderTags();
          tagInput.value = '';
          updatePreview();
        }
      }
    });
    
    function renderTags() {
      tagsList.innerHTML = tags.map(tag => `
        <div class="tag-item">
          ${tag}
          <button onclick="removeTag('${tag}')" title="Remove tag">Ã—</button>
        </div>
      `).join('');
    }
    
    window.removeTag = function(tag) {
      tags = tags.filter(t => t !== tag);
      renderTags();
      updatePreview();
    };
    
    // Floating toolbar for text selection
    let floatingToolbarPosition = { left: 0, top: 0 };
    
    document.addEventListener('selectionchange', () => {
      const selection = window.getSelection();
      if (selection.rangeCount > 0 && !selection.isCollapsed && editor.contains(selection.anchorNode)) {
        const range = selection.getRangeAt(0);
        const rect = range.getBoundingClientRect();
        const editorRect = editor.getBoundingClientRect();
        const writingWrapper = document.querySelector('.writing-wrapper');
        const wrapperRect = writingWrapper.getBoundingClientRect();
        
        floatingToolbarPosition.left = rect.left - wrapperRect.left + rect.width / 2 - floatingToolbar.offsetWidth / 2;
        floatingToolbarPosition.top = rect.top - wrapperRect.top - floatingToolbar.offsetHeight - 10;
        
        floatingToolbar.style.left = `${floatingToolbarPosition.left}px`;
        floatingToolbar.style.top = `${floatingToolbarPosition.top}px`;
        floatingToolbar.classList.add('show');
        
        updateFloatingToolbarState();
      } else {
        floatingToolbar.classList.remove('show');
      }
    });
    
    function updateFloatingToolbarState() {
      const isBold = document.queryCommandState('bold');
      const isItalic = document.queryCommandState('italic');
      
      floatingToolbar.querySelector('[data-action="bold"]').classList.toggle('active', isBold);
      floatingToolbar.querySelector('[data-action="italic"]').classList.toggle('active', isItalic);
    }
    
    // Toolbar actions
    floatingToolbar.addEventListener('click', handleFloatingToolbarAction);
    fixedToolbar.addEventListener('click', handleFixedToolbarAction);
    
    function handleFloatingToolbarAction(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const button = e.target.closest('button');
      if (!button) return;
      
      const action = button.dataset.action;
      
      // Save selection before executing command
      const selection = window.getSelection();
      const range = selection.rangeCount > 0 ? selection.getRangeAt(0) : null;
      
      switch(action) {
        case 'bold':
          document.execCommand('bold');
          break;
        case 'italic':
          document.execCommand('italic');
          break;
        case 'link':
          const url = prompt('Enter URL:');
          if (url) {
            document.execCommand('createLink', false, url);
          }
          break;
      }
      
      // Restore toolbar position
      floatingToolbar.style.left = `${floatingToolbarPosition.left}px`;
      floatingToolbar.style.top = `${floatingToolbarPosition.top}px`;
      
      updateFloatingToolbarState();
      editor.focus();
      
      // Restore selection if needed
      if (range) {
        selection.removeAllRanges();
        selection.addRange(range);
      }
    }
    
    function handleFixedToolbarAction(e) {
      const button = e.target.closest('button');
      if (!button) return;
      
      const action = button.dataset.action;
      
      switch(action) {
        case 'heading1':
          toggleHeading('h1');
          break;
        case 'heading2':
          toggleHeading('h2');
          break;
        case 'heading3':
          toggleHeading('h3');
          break;
        case 'blockquote':
          toggleBlockquote();
          break;
        case 'pullquote':
          insertPullQuote();
          break;
        case 'image':
          insertImage();
          break;
        case 'list':
          document.execCommand('insertUnorderedList');
          break;
      }
      
      editor.focus();
      updatePreview();
    }
    
    function toggleHeading(tagName) {
      const selection = window.getSelection();
      if (selection.rangeCount === 0) return;
      
      const range = selection.getRangeAt(0);
      let container = range.commonAncestorContainer;
      
      // Find the parent block element
      if (container.nodeType === Node.TEXT_NODE) {
        container = container.parentNode;
      }
      
      // Check if we're inside a heading
      let currentHeading = null;
      let element = container;
      while (element && element !== editor) {
        if (element.tagName && ['H1', 'H2', 'H3'].includes(element.tagName)) {
          currentHeading = element;
          break;
        }
        element = element.parentNode;
      }
      
      if (currentHeading) {
        // If we're in a heading, convert it to the new type or remove it
        if (currentHeading.tagName.toLowerCase() === tagName) {
          // Same heading type - convert to paragraph
          const p = document.createElement('p');
          p.innerHTML = currentHeading.innerHTML;
          currentHeading.parentNode.replaceChild(p, currentHeading);
          
          // Restore selection
          const newRange = document.createRange();
          newRange.selectNodeContents(p);
          selection.removeAllRanges();
          selection.addRange(newRange);
        } else {
          // Different heading type - change it
          const newHeading = document.createElement(tagName);
          newHeading.innerHTML = currentHeading.innerHTML;
          currentHeading.parentNode.replaceChild(newHeading, currentHeading);
          
          // Restore selection
          const newRange = document.createRange();
          newRange.selectNodeContents(newHeading);
          selection.removeAllRanges();
          selection.addRange(newRange);
        }
      } else {
        // Not in a heading - create one
        document.execCommand('formatBlock', false, tagName);
      }
    }
    
    function toggleBlockquote() {
      const selection = window.getSelection();
      if (selection.rangeCount === 0) return;
      
      const range = selection.getRangeAt(0);
      let container = range.commonAncestorContainer;
      
      // Find the parent block element
      if (container.nodeType === Node.TEXT_NODE) {
        container = container.parentNode;
      }
      
      // Check if we're inside a blockquote
      let currentBlockquote = null;
      let element = container;
      while (element && element !== editor) {
        if (element.tagName && element.tagName === 'BLOCKQUOTE' && !element.classList.contains('pullquote')) {
          currentBlockquote = element;
          break;
        }
        element = element.parentNode;
      }
      
      if (currentBlockquote) {
        // We're in a blockquote - unwrap it
        const fragment = document.createDocumentFragment();
        while (currentBlockquote.firstChild) {
          fragment.appendChild(currentBlockquote.firstChild);
        }
        currentBlockquote.parentNode.replaceChild(fragment, currentBlockquote);
        
        // Restore selection
        selection.removeAllRanges();
        selection.addRange(range);
      } else {
        // Not in a blockquote - create one
        const selectedText = selection.toString();
        if (selectedText) {
          // Wrap selected text
          const blockquote = document.createElement('blockquote');
          try {
            range.surroundContents(blockquote);
          } catch (e) {
            // If surroundContents fails, use a different approach
            const extracted = range.extractContents();
            blockquote.appendChild(extracted);
            range.insertNode(blockquote);
          }
        } else {
          // No selection - format the block
          document.execCommand('formatBlock', false, 'blockquote');
        }
      }
    }
    
    function wrapOrFormat(tagName) {
      const selection = window.getSelection();
      if (selection.rangeCount > 0) {
        const range = selection.getRangeAt(0);
        const selectedText = range.toString();
        
        if (selectedText) {
          // If text is selected, wrap it
          const element = document.createElement(tagName);
          try {
            range.surroundContents(element);
          } catch (e) {
            // If surroundContents fails, use insertHTML
            const html = `<${tagName}>${selectedText}</${tagName}>`;
            document.execCommand('insertHTML', false, html);
          }
        } else {
          // If no text selected, format the block
          document.execCommand('formatBlock', false, tagName);
        }
      } else {
        // Fallback to formatBlock
        document.execCommand('formatBlock', false, tagName);
      }
    }
    
    function insertPullQuote() {
      const selection = window.getSelection();
      if (selection.rangeCount > 0 && selection.toString().trim()) {
        const selectedText = selection.toString();
        // Insert the literal HTML tags as text that will show in the editor
        const wrappedText = `<blockquote class="pullquote">${selectedText}</blockquote>`;
        
        // Replace the selected text with the wrapped version
        const range = selection.getRangeAt(0);
        range.deleteContents();
        const textNode = document.createTextNode(wrappedText);
        range.insertNode(textNode);
        
        // Clear selection
        selection.removeAllRanges();
      } else {
        // If no text is selected, insert placeholder with literal tags
        const placeholderText = '<blockquote class="pullquote">Your pull quote here...</blockquote>';
        document.execCommand('insertText', false, placeholderText);
      }
      
      updatePreview();
    }
    
    function insertImage() {
      const altText = prompt('Enter image alt text:') || 'Image description';
      const html = `<img src="/path/to/image.jpg" alt="${altText}" />`;
      document.execCommand('insertHTML', false, html);
    }
    
    // Keyboard shortcuts
    editor.addEventListener('keydown', (e) => {
      if (e.ctrlKey || e.metaKey) {
        switch(e.key) {
          case 'b':
            e.preventDefault();
            document.execCommand('bold');
            break;
          case 'i':
            e.preventDefault();
            document.execCommand('italic');
            break;
        }
      }
    });
    
    // Update preview on input
    editor.addEventListener('input', updatePreview);
    document.getElementById('post-title').addEventListener('input', updatePreview);
    document.getElementById('post-date').addEventListener('input', updatePreview);
    document.getElementById('post-thumbnail').addEventListener('input', updatePreview);
    document.getElementById('post-excerpt').addEventListener('input', updatePreview);
    
    function updatePreview() {
      const markdown = generateMarkdown();
      previewElement.textContent = markdown;
      
      // Auto-save
      localStorage.setItem('blog-draft', JSON.stringify({
        title: document.getElementById('post-title').value,
        date: document.getElementById('post-date').value,
        thumbnail: document.getElementById('post-thumbnail').value,
        excerpt: document.getElementById('post-excerpt').value,
        tags: tags,
        content: editor.innerHTML
      }));
    }
    
    // Generate markdown
    function generateMarkdown() {
      const title = document.getElementById('post-title').value || 'Untitled';
      const date = document.getElementById('post-date').value;
      const thumbnail = document.getElementById('post-thumbnail').value || '/images/covers/placeholder.jpg';
      const excerpt = document.getElementById('post-excerpt').value || '';
      
      let frontmatter = '---\n';
      frontmatter += `title: "${title}"\n`;
      frontmatter += `date: ${date}\n`;
      frontmatter += `thumbnail: "${thumbnail}"\n`;
      frontmatter += `excerpt: "${excerpt}"\n`;
      if (tags.length > 0) {
        frontmatter += 'tags:\n';
        tags.forEach(tag => {
          frontmatter += `  - ${tag}\n`;
        });
      }
      frontmatter += '---\n\n';
      
      const content = htmlToMarkdown(editor.innerHTML);
      
      return frontmatter + content;
    }
    
    // HTML to Markdown converter
    function htmlToMarkdown(html) {
      let markdown = html;
      
      // Clean up
      markdown = markdown.replace(/<br\s*\/?>/gi, '\n');
      markdown = markdown.replace(/&nbsp;/gi, ' ');
      
      // Handle escaped HTML entities for pullquotes
      // Convert &lt;blockquote class="pullquote"&gt; back to <blockquote class="pullquote">
      markdown = markdown.replace(/&lt;blockquote class="pullquote"&gt;([\s\S]*?)&lt;\/blockquote&gt;/gi, '<blockquote class="pullquote">$1</blockquote>');
      
      // Convert elements
      markdown = markdown.replace(/<h1[^>]*>(.*?)<\/h1>/gi, '\n# $1\n');
      markdown = markdown.replace(/<h2[^>]*>(.*?)<\/h2>/gi, '\n## $1\n');
      markdown = markdown.replace(/<h3[^>]*>(.*?)<\/h3>/gi, '\n### $1\n');
      
      // Preserve pullquotes as raw HTML in markdown
      markdown = markdown.replace(/<blockquote[^>]*class="pullquote"[^>]*>([\s\S]*?)<\/blockquote>/gi, '\n<blockquote class="pullquote">\n$1\n</blockquote>\n');
      
      // Convert regular blockquotes to markdown style
      markdown = markdown.replace(/<blockquote(?![^>]*class="pullquote")[^>]*>(.*?)<\/blockquote>/gi, '\n> $1\n');
      
      markdown = markdown.replace(/<b[^>]*>(.*?)<\/b>/gi, '**$1**');
      markdown = markdown.replace(/<strong[^>]*>(.*?)<\/strong>/gi, '**$1**');
      markdown = markdown.replace(/<i[^>]*>(.*?)<\/i>/gi, '*$1*');
      markdown = markdown.replace(/<em[^>]*>(.*?)<\/em>/gi, '*$1*');
      markdown = markdown.replace(/<a[^>]+href="([^"]+)"[^>]*>(.*?)<\/a>/gi, '[$2]($1)');
      markdown = markdown.replace(/<img[^>]+src="([^"]+)"[^>]+alt="([^"]+)"[^>]*>/gi, '![$2]($1)');
      markdown = markdown.replace(/<img[^>]+alt="([^"]+)"[^>]+src="([^"]+)"[^>]*>/gi, '![$1]($2)');
      markdown = markdown.replace(/<ul[^>]*>(.*?)<\/ul>/gis, (match, content) => {
        const items = content.replace(/<li[^>]*>(.*?)<\/li>/gi, '- $1').trim();
        return '\n' + items + '\n';
      });
      markdown = markdown.replace(/<p[^>]*>(.*?)<\/p>/gi, '$1\n\n');
      markdown = markdown.replace(/<div[^>]*>(.*?)<\/div>/gi, '$1\n');
      
      // Remove remaining HTML tags (but not the pullquote tags we want to keep)
      markdown = markdown.replace(/<(?!blockquote class="pullquote"|\/blockquote)[^>]+>/g, '');
      
      // Clean up escaped entities that might remain
      markdown = markdown.replace(/&lt;/gi, '<');
      markdown = markdown.replace(/&gt;/gi, '>');
      markdown = markdown.replace(/&amp;/gi, '&');
      
      // Clean up multiple newlines
      markdown = markdown.replace(/\n{3,}/g, '\n\n');
      markdown = markdown.trim();
      
      return markdown;
    }
    
    // Export functionality
    exportBtn.addEventListener('click', () => {
      const markdown = generateMarkdown();
      const title = document.getElementById('post-title').value || 'untitled';
      const filename = title.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '') + '.md';
      
      const blob = new Blob([markdown], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });
    
    // Copy functionality
    copyBtn.addEventListener('click', () => {
      const markdown = generateMarkdown();
      navigator.clipboard.writeText(markdown).then(() => {
        copyBtn.innerHTML = '<span>Copied!</span>';
        setTimeout(() => {
          copyBtn.innerHTML = '<span>Copy Markdown</span>';
        }, 2000);
      });
    });
    
    // Load draft on page load
    window.addEventListener('load', () => {
      const draft = localStorage.getItem('blog-draft');
      if (draft) {
        const data = JSON.parse(draft);
        document.getElementById('post-title').value = data.title || '';
        document.getElementById('post-date').value = data.date || new Date().toISOString().split('T')[0];
        document.getElementById('post-thumbnail').value = data.thumbnail || '';
        document.getElementById('post-excerpt').value = data.excerpt || '';
        tags = data.tags || [];
        renderTags();
        editor.innerHTML = data.content || '';
        updatePreview();
      } else {
        updatePreview();
      }
    });
  </script>
</Layout>